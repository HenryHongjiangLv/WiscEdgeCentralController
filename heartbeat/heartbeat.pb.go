// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heartbeat.proto

package heartbeat

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type HeartbeatRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClientId             string   `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c667767fb9826a9, []int{0}
}

func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatRequest.Unmarshal(m, b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
}
func (m *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(m, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return xxx_messageInfo_HeartbeatRequest.Size(m)
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

func (m *HeartbeatRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeartbeatRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// The response message containing the greetings
type HeartbeatReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatReply) Reset()         { *m = HeartbeatReply{} }
func (m *HeartbeatReply) String() string { return proto.CompactTextString(m) }
func (*HeartbeatReply) ProtoMessage()    {}
func (*HeartbeatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c667767fb9826a9, []int{1}
}

func (m *HeartbeatReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatReply.Unmarshal(m, b)
}
func (m *HeartbeatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatReply.Marshal(b, m, deterministic)
}
func (m *HeartbeatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatReply.Merge(m, src)
}
func (m *HeartbeatReply) XXX_Size() int {
	return xxx_messageInfo_HeartbeatReply.Size(m)
}
func (m *HeartbeatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatReply.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatReply proto.InternalMessageInfo

func (m *HeartbeatReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HeartbeatRequest)(nil), "heartbeat.HeartbeatRequest")
	proto.RegisterType((*HeartbeatReply)(nil), "heartbeat.HeartbeatReply")
}

func init() { proto.RegisterFile("heartbeat.proto", fileDescriptor_3c667767fb9826a9) }

var fileDescriptor_3c667767fb9826a9 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x48, 0x4d, 0x2c,
	0x2a, 0x49, 0x4a, 0x4d, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x39, 0x71, 0x09, 0x78, 0xc0, 0x38, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c,
	0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x90, 0x14,
	0x17, 0x47, 0x72, 0x4e, 0x66, 0x6a, 0x5e, 0x89, 0x67, 0x8a, 0x04, 0x13, 0x58, 0x1c, 0xce, 0x57,
	0xd2, 0xe2, 0xe2, 0x43, 0x32, 0xa3, 0x20, 0xa7, 0x52, 0x48, 0x82, 0x8b, 0x3d, 0x37, 0xb5, 0xb8,
	0x38, 0x31, 0x1d, 0x66, 0x08, 0x8c, 0x6b, 0x14, 0xc5, 0xc5, 0x0d, 0x57, 0x1b, 0xe0, 0x24, 0xe4,
	0xcd, 0xc5, 0x1f, 0x94, 0x9a, 0x9c, 0x9a, 0x59, 0x96, 0xea, 0x98, 0x97, 0x02, 0xd1, 0x2b, 0xad,
	0x87, 0x70, 0x2e, 0xba, 0xd3, 0xa4, 0x24, 0xb1, 0x4b, 0x16, 0xe4, 0x54, 0x2a, 0x31, 0x38, 0xe9,
	0x71, 0x49, 0x65, 0xe6, 0xeb, 0xa5, 0x17, 0x15, 0x24, 0xeb, 0xa5, 0x56, 0x24, 0xe6, 0x16, 0xe4,
	0xa4, 0x16, 0x23, 0x94, 0x3b, 0x21, 0xdc, 0x18, 0x00, 0x0a, 0x84, 0x00, 0xc6, 0x24, 0x36, 0x70,
	0x68, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x6a, 0xa3, 0x17, 0x20, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HeartbeatPBClient is the client API for HeartbeatPB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeartbeatPBClient interface {
	// Sends a greeting
	ReceiveAndReply(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error)
}

type heartbeatPBClient struct {
	cc *grpc.ClientConn
}

func NewHeartbeatPBClient(cc *grpc.ClientConn) HeartbeatPBClient {
	return &heartbeatPBClient{cc}
}

func (c *heartbeatPBClient) ReceiveAndReply(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error) {
	out := new(HeartbeatReply)
	err := c.cc.Invoke(ctx, "/heartbeat.HeartbeatPB/ReceiveAndReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartbeatPBServer is the server API for HeartbeatPB service.
type HeartbeatPBServer interface {
	// Sends a greeting
	ReceiveAndReply(context.Context, *HeartbeatRequest) (*HeartbeatReply, error)
}

func RegisterHeartbeatPBServer(s *grpc.Server, srv HeartbeatPBServer) {
	s.RegisterService(&_HeartbeatPB_serviceDesc, srv)
}

func _HeartbeatPB_ReceiveAndReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatPBServer).ReceiveAndReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heartbeat.HeartbeatPB/ReceiveAndReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatPBServer).ReceiveAndReply(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HeartbeatPB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heartbeat.HeartbeatPB",
	HandlerType: (*HeartbeatPBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveAndReply",
			Handler:    _HeartbeatPB_ReceiveAndReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heartbeat.proto",
}
